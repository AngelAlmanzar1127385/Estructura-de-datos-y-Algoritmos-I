
#include <iostream>
using namespace std;

struct Nodo {

    int dato;
    Nodo* next;
};


void Insertar(Nodo*& lista, int n) {

    Nodo* nuevonodo = new Nodo();
    nuevonodo->dato = n;

    Nodo* aux1 = lista;
    Nodo* aux2 = NULL;

    while ((aux1 != NULL) && (aux1->dato < n)) {

        aux2 = aux1;
        aux1 = aux1->next;
    }

    if (lista == aux1) {

        lista = nuevonodo;
    }
    else
    {
        aux2->next = nuevonodo;
    }

    nuevonodo->next = aux1;

    cout << "Elemento " << n << " insertado a la lista correctamente\n";

}

void MostrarLista(Nodo*& lista) {

    Nodo* actual = new Nodo();
    actual = lista;

    while (actual != NULL) {

        cout << actual->dato << " -> ";
        actual = actual->next;
    }

}

void Buscar(Nodo*& lista, int n) {

    bool casimiro = false;

    Nodo* actual = new Nodo();
    actual = lista;

    while ((actual != NULL) && (actual->dato <= n))
    {
        if (actual->dato == n)
        {
            casimiro = true;
        }
        actual = actual->next;
    }

    if (casimiro == true)
    {
        cout << "Elemento " << n << " SI ha sido encontrado en la lista\n";
    }
    else
    {
        cout << "Elemento " << n << " NO ha sido encontrado en la lista\n";
    }

}

void Eliminar(Nodo*& lista, int n) {

    if (lista != NULL) {
        Nodo* aux_borrar;
        Nodo* anterior = NULL;
        aux_borrar = lista;

        while ((aux_borrar != NULL) && (aux_borrar->dato != n)) {
            anterior = aux_borrar;
            aux_borrar = aux_borrar->next;
        }

        if (aux_borrar == NULL) {
            cout << "El elemento no existe";
        }
        else if (anterior == NULL) {
            lista = lista->next;
            delete aux_borrar;
        }
        else {
            anterior->next = aux_borrar->next;
            delete aux_borrar;
            
        }
        cout << "Elemento " << n << " eliminado exitosamente\n";

    }
}

int validar(string mensaje, string mensajeError) {

    int david;
    bool lebron = true;

    while (lebron) {
        cout << mensaje;  // Mostramos mensaje de entrada
        cin >> david;      // Leemos dato

        // Si hubo error de entrada o caracteres no válidos
        if (cin.fail() || cin.peek() != '\n') {
            cout << mensajeError << endl << endl;
            cin.clear();            // Limpiar estado de error
            cin.ignore(100, '\n');  // Ignorar lo que sobra en el buffer
            lebron = true;          // Repetimos
        }
        else if (david < 0)
        {
            cout << "Solo numeros positivos";
        }
        else {

            lebron = false; // Entrada válida
            return david;
        }
    }
}

void LimpiarConsola() {

    system("pause");
    system("cls");
}


int main()
{
    int dato, opcion;
    Nodo* lista = NULL;
    bool lebron = true;

    while (lebron)
    {

        cout << "\n::::LISTAS ENLAZADAS::::\n";
        cout << "1. Insertar\n";
        cout << "2. Eliminar\n";
        cout << "3. Buscar\n";
        cout << "4. Mostar Lista Enlazada\n";
        cout << "5. Salir\n";

        opcion = validar("Seleccione la opcion: ", "Dato Invalido, intente nuevamente");

        switch (opcion)
        {
        case 1:

            
            dato = validar("Ingrese un dato: ", "Dato invalido, intente nuevamente");
            Insertar(lista, dato);
            break;

        case 2:

            if (lista == NULL) cout << "La lista esta vacia";
            dato = validar("Ingrese el dato a eliminar: ", "Dato invalido, intente nuevamente");
            Eliminar(lista, dato);
            break;

        case 3:

            if (lista == NULL) cout << "La lista esta vacia";
            dato = validar("Ingrese el dato a buscar: ", "Dato invalido, intente nuevamente");
            Buscar(lista, dato);
            break;

        case 4:

            if (lista == NULL) cout << "La lista esta vacia";
            MostrarLista(lista);
            break;

        case 5:

            cout << "Saliendo del programa\n";
            lebron = false;
            break;

        default:
            cout << "Esta opcion no esta disponible" << "\n";
            break;
        }

        LimpiarConsola();
    }

    
}

